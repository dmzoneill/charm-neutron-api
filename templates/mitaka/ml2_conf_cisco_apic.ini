# mitaka
###############################################################################
# [ WARNING ]
# Configuration file maintained by Juju. Local changes may be overwritten.
###############################################################################
[ml2]
type_drivers = {{ type_drivers }}
tenant_network_types = {{ tenant_network_types }}
mechanism_drivers = {{ mechanism_drivers }}

#[ml2_type_gre]
#tunnel_id_ranges = 1:1000

{% if aci_encap == 'vxlan' -%}
[ml2_type_vxlan]
{%  if vni_ranges -%}
vni_ranges = {{ vni_ranges }}
{% else -%}
vni_ranges = 1001:2000
{% endif -%}
{% endif -%}

{% if aci_encap == 'vlan' -%}
[ml2_type_vlan]
{% if vlan_ranges -%}
network_vlan_ranges = {{ vlan_ranges }}
{% else -%}
network_vlan_ranges = physnet1:1000:1200
{% endif -%}
{% endif -%}

[ovs]
enable_tunneling = False

[agent]
tunnel_types = vxlan
l2_population = False
[securitygroup]
enable_security_group = True

[ml2_cisco_apic]

# Hostname:port list of APIC controllers
# apic_hosts = 1.1.1.1:80, 1.1.1.2:8080, 1.1.1.3:80
apic_hosts = {{ apic_hosts }}

# Username for the APIC controller
# apic_username = user
apic_username = {{ apic_username }}

# Password for the APIC controller
# apic_password = password
apic_password = {{ apic_password }}

# Whether use SSl for connecting to the APIC controller or not
apic_use_ssl = True

# How to map names to APIC: use_uuid or use_name
apic_name_mapping = use_name

# Use a pre-existing physdom or let api create a vmm domain
use_vmm = {{ use_vmm }}

#domain name for openstack instance
apic_domain_name = {{ apic_domain_name }}

#provision apic infrastructure
apic_provision_infra = {{ apic_provision_infra }}

#provision the hostlink profiles in apic
apic_provision_hostlinks = {{ apic_provision_hostlinks }}

#if gbp is used
{% if use_gbp -%}
[group_policy]
policy_drivers = implicit_policy,apic
[group_policy_implicit_policy]
default_ip_pool = 192.168.0.0/16
[appliance_driver]
svc_management_ptg_name = Service-Management
{% endif %}

{% if apic_connection_json %}
{% set ac = apic_connection_json|s_to_dict %} 
{% for sw in ac %}
[apic_switch:{{ sw }}]
{% for pstr in ac[sw] %}
{% if pstr -%}
{{ pstr|replace(":","=") }}
{% endif -%}
{% endfor %}
{% endfor %}
{% endif -%}

{% if apic_l3out -%}
{% set extlist = apic_l3out.split(',') %}
{% for el in extlist %}
{% set elist = el.split(':') %}
[apic_external_network:{{ elist[0] }}]
preexisting = True
external_epg = {{ elist[1] }}
{% endfor %}
{% endif -%}
